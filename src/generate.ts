import * as fs from 'node:fs'
import * as path from 'node:path'
import { createNotionDefinitions, createTypeDefinition } from '@/recast'
import { Client } from '@notionhq/client'
import { loadConfig } from './config'

async function generateType(client: Client, databaseId: string, name: string) {
  const response = await client.databases.retrieve({ database_id: databaseId })
  return createTypeDefinition(response, name)
}

export async function generateTypes(configPath: string) {
  const config = await loadConfig(configPath)
  const { databases, outputDir, apiKey } = config

  const client = new Client({ auth: apiKey })

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }

  const entries: [string, string][] = Object.entries(databases)
  const generated = await Promise.all(
    entries.map(([name, databaseId]) => {
      return generateType(client, databaseId, name)
    }),
  )
  const names = generated.map((type) => type.name)
  const types = generated.map((type) => type.type)
  const outputPath = path.resolve(outputDir, 'index.d.ts')
  fs.writeFileSync(
    outputPath,
    `// This file is generated by notion-schema\n\n${types.join('\n\n')}\n\n// Following is Notion API definitions\n\n${createNotionDefinitions(names)}`,
  )
}
